<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo + Github Pages搭建个人博客</title>
      <link href="/2023/07/09/shi-yong-hexo-github-pages-da-jian-ge-ren-bo-ke/"/>
      <url>/2023/07/09/shi-yong-hexo-github-pages-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="一-认识"><a href="#一-认识" class="headerlink" title="一. 认识"></a>一. 认识</h1><h2 id="1-什么是-Hexo？"><a href="#1-什么是-Hexo？" class="headerlink" title="1. 什么是 Hexo？"></a>1. 什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="2-什么是GitHub-Pages"><a href="#2-什么是GitHub-Pages" class="headerlink" title="2. 什么是GitHub Pages"></a>2. 什么是GitHub Pages</h2><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p><h2 id="3-如何上传内容"><a href="#3-如何上传内容" class="headerlink" title="3. 如何上传内容"></a>3. 如何上传内容</h2><p>我们只需要通过 Markdown 语法写好自己的博客内容，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，然后通过简单的命令就能够将生成的网页上传到 Github。</p><h1 id="二-步骤"><a href="#二-步骤" class="headerlink" title="二. 步骤"></a>二. 步骤</h1><h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.  安装Node.js"></a>1.  安装Node.js</h2><p><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)为大多数平台提供了官方的 <a href="https://nodejs.org/zh-cn/download/">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npmmirror.com/mirrors/node/">淘宝 Node.js 镜像</a> 下载。</p><p>其它的安装方法：</p><ul><li>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者 <a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。</li><li>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。</li><li>Linux（DEB/RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li><li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/zh-cn/download/package-manager/">指导</a>。</li></ul><h2 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装 Git"></a>2. 安装 Git</h2><ul><li><a href="http://git-scm.com/">Git</a></li><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>。</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><h2 id="3-检查"><a href="#3-检查" class="headerlink" title="3. 检查"></a>3. 检查</h2><p>Win+R 输入 cmd 并打开终端，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，出现程序版本号即可。</p><h2 id="4-连接-Github"><a href="#4-连接-Github" class="headerlink" title="4. 连接 Github"></a>4. 连接 Github</h2><p>打开Git Bash Here：</p><pre class="line-numbers language-none"><code class="language-none"># 配置用户名和邮箱 git config --global user.name "github 用户名" git config --global user.email "github 注册邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建 SSH 密匙：</p><pre class="line-numbers language-none"><code class="language-none"># 生成 ssh 密钥ssh-keygen -t rsa -C "github的注册邮箱"# 一直回车<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），记事本打开公钥id_rsa.pub并复制里面的内容。</p><p>进入GIthub 的settings，点击左侧的 SSH and GPG keys，点New SSH key，title随便写，把复制的公钥填入key里，然后Add SSH Key。</p><h2 id="5-创建-Github-Pages-仓库"><a href="#5-创建-Github-Pages-仓库" class="headerlink" title="5. 创建 Github Pages 仓库"></a>5. 创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New </p><ul><li>Repository name 中输入 <code>用户名.github.io</code></li><li>勾选 “Initialize this repository with a README”</li><li>Description 选填</li><li>Public</li><li>Create repository 创建</li></ul><p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p><h2 id="6-安装-Hexo"><a href="#6-安装-Hexo" class="headerlink" title="6. 安装 Hexo"></a>6. 安装 Hexo</h2><pre class="line-numbers language-none"><code class="language-none">$ npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化并安装所需组件：</p><pre class="line-numbers language-none"><code class="language-none">hexo init      # 初始化npm install    # 安装组件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动本地服务器进行预览：</p><pre class="line-numbers language-none"><code class="language-none">hexo g   # 生成页面hexo s   # 启动预览<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>访问</strong> <code>http://localhost:4000</code>，出现 Hexo 默认页面，本地博客安装成功</p><h2 id="7-部署-Hexo-到-GitHub-Pages"><a href="#7-部署-Hexo-到-GitHub-Pages" class="headerlink" title="7. 部署 Hexo 到 GitHub Pages"></a>7. 部署 Hexo 到 GitHub Pages</h2><p>首先<strong>安装 hexo-deployer-git</strong>：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repository: git@github.com:用户名/用户名.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p><p>这时访问域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p><h2 id="8-发布文章"><a href="#8-发布文章" class="headerlink" title="8. 发布文章"></a>8. 发布文章</h2><p>自己在source/_posts中创建 .md 文件，在文件开头手动加入如下格式 Front-matter 即可。</p><pre class="line-numbers language-none"><code class="language-none">---title: 主题介绍date: 2023-07-09 09:25:00author: 酷酷的qiimg: /medias/banner/1.jpgtop: truecover: truecoverImg: /medias/banner/1.jpgpassword: toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---摘要&lt;!--more--&gt;正文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。</p><pre class="line-numbers language-none"><code class="language-none">hexo g   # 生成页面hexo d   # 部署发布<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="9-常用命令"><a href="#9-常用命令" class="headerlink" title="9. 常用命令"></a>9. 常用命令</h2><pre class="line-numbers language-none"><code class="language-none">hexo new "name"       # 新建文章hexo new page "name"  # 新建页面hexo g                # 生成页面hexo d                # 部署hexo g -d             # 生成页面并部署hexo s                # 本地预览hexo clean            # 清除缓存和已生成的静态文件hexo help             # 帮助<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 起步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/07/09/qi-bu/"/>
      <url>/2023/07/09/qi-bu/</url>
      
        <content type="html"><![CDATA[<p>2023.07.09 </p><p>想记录一下学过的知识，发现没有合适的途径，于是用Hexo + GitHub的方式搭建了个人博客。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 起步 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
